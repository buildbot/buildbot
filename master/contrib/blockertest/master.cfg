# -*- python -*-
# ex: set syntax=python:

# Buildbot master config file for testing the Blocker step.  See README.


c = BuildmasterConfig = {}


# ---------------------------------------------------------------------------
# Build slaves

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("slaveA", "slaveA"),
               BuildSlave("slaveB", "slaveB"),
              ]

c['slavePortnum'] = 9989


# ---------------------------------------------------------------------------
# Schedulers

# No schedulers here: all builds are forced.
c['schedulers'] = []


# ---------------------------------------------------------------------------
# Custom build steps

from twisted.internet import reactor 
from buildbot.process import buildstep
from buildbot.status.results import SUCCESS, FAILURE
from buildbot.steps import blocker

class Blocker(blocker.Blocker):
    """
    The obligatory custom subclass of Blocker that defines the criteria
    for matching builds.  This is a naive implementation that works just
    fine in the context of Blocker's tests, but is unsuitable for the
    real world.
    """
    def buildsMatch(self, buildStatus1, buildStatus2):
        return buildStatus1.getNumber() == buildStatus2.getNumber()

class Delay(buildstep.BuildStep):
    """
    A build step that simply stalls.  Completely useless *except* for
    testing Blocker.
    """
    parms = buildstep.BuildStep.parms + ['delay']

    delay = None                        # delay in seconds (can be float)
    
    def start(self):
        self.step_status.setText(["delaying", "%g sec" % self.delay])
        reactor.callLater(self.delay, self.finished, SUCCESS)

    def finished(self, results):
        self.step_status.setText(["delayed", "%g sec" % self.delay])
        buildstep.BuildStep.finished(self, results)

import datetime
class Timestamp(buildstep.BuildStep):
    """
    A build step that writes the current date/time (on the master) to
    its sole LogFile.
    """
    def start(self):
        self.step_status.setText([self.name])
        self.addLog("stdio").addHeader(str(datetime.datetime.now()))
        self.finished(SUCCESS)

class NoOp(buildstep.BuildStep):
    """
    A build step that does nothing except finish with a caller-
    supplied status (default SUCCESS).
    """
    parms = buildstep.BuildStep.parms + ['result']

    result = SUCCESS
    flunkOnFailure = True

    def start(self):
        self.step_status.setText([self.name])
        self.finished(self.result)


# ---------------------------------------------------------------------------
# Builders

from buildbot.process import factory

c['builders'] = []

def addBuilderPair(idx, factoryA, factoryB):
    name = "builder%dA" % idx
    builderA = {'name':      name,
                'slavename': "slaveA",
                'builddir':  name,
                'factory':   factoryA}
    name = "builder%dB" % idx
    builderB = {'name':      name,
                'slavename': "slaveB",
                'builddir':  name,
                'factory':   factoryB}
    c['builders'] += [builderA, builderB]

class MyFactory(factory.BuildFactory):
    """
    Override addStep() so every build step has a sensible description:
    it's the same as the name.
    """
    def addStep(self, step):
        if hasattr(step, 'description') and step.description is None:
            step.factory[1]['description'] = step.name
        factory.BuildFactory.addStep(self, step)


# TEST 1: dead simple.  

factory1A = MyFactory()
factory1A.addStep(Delay(name="sleep", delay=3.0))

factory1B = MyFactory()
factory1B.addStep(Blocker(name="blockB",
                          upstreamSteps=[("builder1A", "sleep")]))

addBuilderPair(1, factory1A, factory1B)


# TEST 2: same, with more steps

factory2A = MyFactory()
factory2A.addStep(NoOp(name="foo"))
factory2A.addStep(Delay(name="sleep", delay=3))
factory2A.addStep(Timestamp(name="date"))

factory2B = MyFactory()
factory2B.addStep(NoOp(name="foo"))
factory2B.addStep(Blocker(name="blockB",
                          upstreamSteps=[("builder2A", "date")]))
factory2B.addStep(Timestamp(name="date"))

addBuilderPair(2, factory2A, factory2B)


# TEST 3: ping-pong blockers

factory3A = MyFactory()
factory3B = MyFactory()

factory3A.addStep(Delay(name="setupA", delay=3.0))

factory3B.addStep(Blocker(name="blockB",
                          upstreamSteps=[("builder3A", "setupA")]))

# These two steps run concurrently because 'blockB' blocks 'buildB' from running
# until 'setupA' is done.
factory3A.addStep(Delay(name="buildA", delay=2))
factory3B.addStep(Delay(name="buildB", delay=5))

# Finally, the 'finishA' step is blocked from running until 'buildB' is done.
# (Step 'finishB' is just there so we can compare timestamps again.)
factory3A.addStep(Blocker(name="blockA",
                          upstreamSteps=[("builder3B", "buildB")]))
factory3A.addStep(Timestamp(name="finishA"))
factory3B.addStep(Timestamp(name="finishB"))

addBuilderPair(3, factory3A, factory3B)

# TEST 4: Blocker that doesn't block

factory4A = MyFactory()
factory4B = MyFactory()

factory4A.addStep(Delay(name="buildA", delay=2))
factory4B.addStep(Delay(name="buildB", delay=5))
factory4B.addStep(Blocker(name="blockB", upstreamSteps=[("builder4A", "buildA")]))
factory4A.addStep(Timestamp(name="finishA"))
factory4B.addStep(Timestamp(name="finishB"))

addBuilderPair(4, factory4A, factory4B)


# TEST 5: config error (bad builder)

factory5A = MyFactory()
factory5B = MyFactory()

factory5B.addStep(Blocker(name="blockB", upstreamSteps=[("foo", "build")]))

addBuilderPair(5, factory5A, factory5B)


# TEST 6: config error (bad build step)

factory6A = MyFactory()
factory6B = MyFactory()

factory6B.addStep(Blocker(name="blockB", upstreamSteps=[("builder6A", "foo")]))

addBuilderPair(6, factory6A, factory6B)


# TEST 7: upstream failure

factory7A = MyFactory()
factory7B = MyFactory()

factory7A.addStep(Delay(name="build", delay=1))
factory7A.addStep(NoOp(name="crash", result=FAILURE))
factory7B.addStep(Blocker(name="blockB", upstreamSteps=[("builder7A", "crash")]))

addBuilderPair(7, factory7A, factory7B)


# TEST 8: multiple upstream steps

factory8A = MyFactory()
factory8B = MyFactory()

factory8A.addStep(NoOp(name="prep"))
factory8A.addStep(Delay(name="buildA", delay=2))
factory8B.addStep(Delay(name="buildB", delay=1))
factory8B.addStep(Blocker(name="blockB",
                          upstreamSteps=[("builder8A", "prep"),
                                         ("builder8A", "buildA"),
                                         ("builder8B", "buildB")]))

addBuilderPair(8, factory8A, factory8B)


# TEST 9: multiple upstream steps with failure

factory9A = MyFactory()
factory9B = MyFactory()

factory9A.addStep(NoOp(name="prep", result=FAILURE))
factory9A.addStep(Delay(name="buildA", delay=2))
factory9B.addStep(Delay(name="buildB", delay=1))
factory9B.addStep(Blocker(name="blockB",
                          upstreamSteps=[("builder9A", "prep"),
                                         ("builder9A", "buildA"),
                                         ("builder9B", "buildB")]))

addBuilderPair(9, factory9A, factory9B)


# TEST 10: timeout

factory10A = MyFactory()
factory10B = MyFactory()

factory10A.addStep(NoOp(name="prep", result=SUCCESS))
factory10A.addStep(Delay(name="build", delay=3))
factory10A.addStep(NoOp(name="finish", result=SUCCESS))
factory10B.addStep(Delay(name="delay", delay=1))
factory10B.addStep(Blocker(name="blockB",
                           timeout=1,
                           upstreamSteps=[("builder10A", "prep"),
                                          ("builder10A", "finish")]))

addBuilderPair(10, factory10A, factory10B)


# ---------------------------------------------------------------------------
# Status targets

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=9980, allowForce=True))

from buildbot.status import client
c['status'].append(client.PBListener(9988))


# ---------------------------------------------------------------------------
# Debugging options

c['debugPassword'] = "debug"


# ---------------------------------------------------------------------------
# Project identity

c['title'] = "blockertest"
c['titleURL'] = ""

c['buildbotURL'] = "http://localhost:9980/"
